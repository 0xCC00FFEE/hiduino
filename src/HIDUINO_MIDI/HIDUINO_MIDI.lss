
HIDUINO_MIDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000e68  00000efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080011c  0080011c  00000f18  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000580  00000000  00000000  00001c60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000093d5  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002383  00000000  00000000  0000b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004240  00000000  00000000  0000d938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f10  00000000  00000000  00011b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003deb  00000000  00000000  00012a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057d2  00000000  00000000  00016873  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  0001c045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
   2:	00 00       	nop
   4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
   6:	00 00       	nop
   8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
   a:	00 00       	nop
   c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
   e:	00 00       	nop
  10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
  12:	00 00       	nop
  14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
  16:	00 00       	nop
  18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
  22:	00 00       	nop
  24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c4       	rjmp	.+2218   	; 0x8d4 <__vector_10>
  2a:	00 00       	nop
  2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
  32:	00 00       	nop
  34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
  36:	00 00       	nop
  38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
  3e:	00 00       	nop
  40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
  42:	00 00       	nop
  44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
  46:	00 00       	nop
  48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
  4e:	00 00       	nop
  50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
  52:	00 00       	nop
  54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
  56:	00 00       	nop
  58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
  5e:	00 00       	nop
  60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
  62:	00 00       	nop
  64:	54 c1       	rjmp	.+680    	; 0x30e <__vector_25>
  66:	00 00       	nop
  68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
  6e:	00 00       	nop
  70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
  72:	00 00       	nop
  74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
  76:	00 00       	nop
  78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
  7e:	00 00       	nop
  80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
  82:	00 00       	nop
  84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
  86:	00 00       	nop
  88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
  8e:	00 00       	nop
  90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
  92:	00 00       	nop
  94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	10 03 48 00 49 00 44 00 55 00 49 00 4e 00 4f 00     ..H.I.D.U.I.N.O.
  a8:	00 00                                               ..

000000aa <ManufacturerString>:
  aa:	10 03 48 00 49 00 44 00 55 00 49 00 4e 00 4f 00     ..H.I.D.U.I.N.O.
  ba:	00 00                                               ..

000000bc <LanguageString>:
  bc:	04 03 09 04                                         ....

000000c0 <ConfigurationDescriptor>:
  c0:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  d0:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  e0:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  f0:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
 100:	09 24 03 02 04 01 01 01 00 09 05 01 02 40 00 05     .$...........@..
 110:	00 00 05 25 01 01 01 09 05 82 02 40 00 05 00 00     ...%.......@....
 120:	05 25 01 01 03                                      .%...

00000125 <DeviceDescriptor>:
 125:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 135:	00 01 00                                            ...

00000138 <__ctors_end>:
 138:	11 24       	eor	r1, r1
 13a:	1f be       	out	0x3f, r1	; 63
 13c:	cf ef       	ldi	r28, 0xFF	; 255
 13e:	d0 e2       	ldi	r29, 0x20	; 32
 140:	de bf       	out	0x3e, r29	; 62
 142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	e8 e6       	ldi	r30, 0x68	; 104
 14c:	fe e0       	ldi	r31, 0x0E	; 14
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	ac 31       	cpi	r26, 0x1C	; 28
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	1b be       	out	0x3b, r1	; 59

00000160 <__do_clear_bss>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	ac e1       	ldi	r26, 0x1C	; 28
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
 168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
 16a:	a1 33       	cpi	r26, 0x31	; 49
 16c:	b1 07       	cpc	r27, r17
 16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
 170:	ac d0       	rcall	.+344    	; 0x2ca <main>
 172:	78 c6       	rjmp	.+3312   	; 0xe64 <_exit>

00000174 <__bad_interrupt>:
 174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <LEDs_TurnOffLEDs>:
				PORTD |= LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	80 95       	com	r24
 17a:	89 23       	and	r24, r25
 17c:	8b b9       	out	0x0b, r24	; 11
			}
 17e:	08 95       	ret

00000180 <SetupHardware>:
	
}


// Configures the board hardware and chip peripherals for the demo's functionality.
void SetupHardware(void) {
 180:	cf 93       	push	r28
 182:	df 93       	push	r29

	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
 184:	84 b7       	in	r24, 0x34	; 52
 186:	87 7f       	andi	r24, 0xF7	; 247
 188:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 18a:	28 e1       	ldi	r18, 0x18	; 24
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	20 93 60 00 	sts	0x0060, r18
 194:	10 92 60 00 	sts	0x0060, r1
 198:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	80 93 61 00 	sts	0x0061, r24
 1a6:	90 93 61 00 	sts	0x0061, r25
 1aa:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1ac:	8f e0       	ldi	r24, 0x0F	; 15
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 cd 00 	sts	0x00CD, r25
 1b4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1be:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1c2:	c9 ec       	ldi	r28, 0xC9	; 201
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	28 83       	st	Y, r18

				DDRD  |= (1 << 3);
 1c8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 1ca:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1cc:	8a b1       	in	r24, 0x0a	; 10
 1ce:	80 6f       	ori	r24, 0xF0	; 240
 1d0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	8b b9       	out	0x0b, r24	; 11

	// Hardware Initialization  
	Serial_Init(31250, false);
	
	LEDs_Init();
	USB_Init();
 1d8:	62 d3       	rcall	.+1732   	; 0x89e <USB_Init>
 1da:	84 e0       	ldi	r24, 0x04	; 4
	
	// Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface
	TCCR0B = (1 << CS02);
 1dc:	85 bd       	out	0x25, r24	; 37
 1de:	18 82       	st	Y, r1
			
	// Serial Interrupts
	UCSR1B = 0;
 1e0:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 1e2:	88 83       	st	Y, r24
 1e4:	df 91       	pop	r29
	
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <EVENT_USB_Device_Connect>:
 1ea:	8b b1       	in	r24, 0x0b	; 11
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	80 6a       	ori	r24, 0xA0	; 160
 1f0:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1f2:	08 95       	ret

000001f4 <EVENT_USB_Device_Disconnect>:
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	80 61       	ori	r24, 0x10	; 16
 1fa:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void) {
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1fc:	08 95       	ret

000001fe <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
	bool ConfigSuccess = true;

	ConfigSuccess &= MIDI_Device_ConfigureEndpoints(&MIDI_Interface);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	b3 d5       	rcall	.+2918   	; 0xd6a <MIDI_Device_ConfigureEndpoints>
 204:	88 23       	and	r24, r24

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 206:	11 f0       	breq	.+4      	; 0x20c <EVENT_USB_Device_ConfigurationChanged+0xe>
 208:	90 e6       	ldi	r25, 0x60	; 96
 20a:	01 c0       	rjmp	.+2      	; 0x20e <EVENT_USB_Device_ConfigurationChanged+0x10>
 20c:	90 e9       	ldi	r25, 0x90	; 144
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	89 2b       	or	r24, r25
 214:	8b b9       	out	0x0b, r24	; 11
 216:	08 95       	ret

00000218 <EVENT_USB_Device_ControlRequest>:
}
 218:	08 95       	ret

0000021a <MIDI_IN>:
	MIDI_Device_ProcessControlRequest(&MIDI_Interface);
}


// MIDI_IN routine. Host -> Arduino.  
void MIDI_IN(void) {
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	00 d0       	rcall	.+0      	; 0x220 <MIDI_IN+0x6>
 220:	00 d0       	rcall	.+0      	; 0x222 <MIDI_IN+0x8>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62

	MIDI_EventPacket_t ReceivedMIDIEvent;

	if (MIDI_Device_ReceiveEventPacket(&MIDI_Interface, &ReceivedMIDIEvent)) {
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	be 01       	movw	r22, r28
 22c:	6f 5f       	subi	r22, 0xFF	; 255
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	f7 d5       	rcall	.+3054   	; 0xe20 <MIDI_Device_ReceiveEventPacket>
 232:	88 23       	and	r24, r24
 234:	c9 f0       	breq	.+50     	; 0x268 <MIDI_IN+0x4e>
 236:	8a 81       	ldd	r24, Y+2	; 0x02
		Serial_SendByte(ReceivedMIDIEvent.Data1);
 238:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 23c:	95 ff       	sbrs	r25, 5
 23e:	fc cf       	rjmp	.-8      	; 0x238 <MIDI_IN+0x1e>
 240:	80 93 ce 00 	sts	0x00CE, r24
				UDR1 = DataByte;
 244:	8b 81       	ldd	r24, Y+3	; 0x03
		Serial_SendByte(ReceivedMIDIEvent.Data2); 
 246:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 24a:	95 ff       	sbrs	r25, 5
 24c:	fc cf       	rjmp	.-8      	; 0x246 <MIDI_IN+0x2c>
 24e:	80 93 ce 00 	sts	0x00CE, r24
				UDR1 = DataByte;
 252:	8c 81       	ldd	r24, Y+4	; 0x04
		Serial_SendByte(ReceivedMIDIEvent.Data3); 
 254:	90 91 c8 00 	lds	r25, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 258:	95 ff       	sbrs	r25, 5
 25a:	fc cf       	rjmp	.-8      	; 0x254 <MIDI_IN+0x3a>
 25c:	80 93 ce 00 	sts	0x00CE, r24
				UDR1 = DataByte;
 260:	5d 9a       	sbi	0x0b, 5	; 11
				PORTD &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 262:	88 e8       	ldi	r24, 0x88	; 136
		LEDs_TurnOnLEDs(LEDS_LED2);
		rx_ticks = 5000; 
 264:	80 93 1c 01 	sts	0x011C, r24
 268:	0f 90       	pop	r0
	}
	
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <MIDI_OUT>:
 276:	cf 93       	push	r28

// MIDI_OUT routine. Arduino -> Host.  
void MIDI_OUT(void) {
 278:	df 93       	push	r29
 27a:	00 d0       	rcall	.+0      	; 0x27c <MIDI_OUT+0x6>
 27c:	00 d0       	rcall	.+0      	; 0x27e <MIDI_OUT+0x8>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	
	if (complete == 1) {
 282:	80 91 1e 01 	lds	r24, 0x011E
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	c9 f4       	brne	.+50     	; 0x2bc <MIDI_OUT+0x46>
		
		complete = 0;
 28a:	10 92 1e 01 	sts	0x011E, r1
		
		uint8_t MIDICommand = MIDI_FROM_ARDUINO.Data1 >> 4; 

		MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t) {
 28e:	19 82       	std	Y+1, r1	; 0x01
 290:	80 91 21 01 	lds	r24, 0x0121
 294:	8a 83       	std	Y+2, r24	; 0x02
 296:	80 91 22 01 	lds	r24, 0x0122
 29a:	8b 83       	std	Y+3, r24	; 0x03
 29c:	80 91 23 01 	lds	r24, 0x0123
 2a0:	8c 83       	std	Y+4, r24	; 0x04
			.Data1       = MIDI_FROM_ARDUINO.Data1, 
			.Data2       = MIDI_FROM_ARDUINO.Data2, 
			.Data3       = MIDI_FROM_ARDUINO.Data3,		
		};
		
		MIDI_Device_SendEventPacket(&MIDI_Interface, &MIDIEvent);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	be 01       	movw	r22, r28
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	74 d5       	rcall	.+2792   	; 0xd96 <MIDI_Device_SendEventPacket>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
		MIDI_Device_Flush(&MIDI_Interface);
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	8e d5       	rcall	.+2844   	; 0xdd0 <MIDI_Device_Flush>
 2b4:	5c 9a       	sbi	0x0b, 4	; 11
 2b6:	88 e8       	ldi	r24, 0x88	; 136
 2b8:	80 93 1d 01 	sts	0x011D, r24
		
		LEDs_TurnOnLEDs(LEDS_LED1);
		tx_ticks = 5000; 
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0

	}
	
	
}
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <main>:
 2ca:	5a df       	rcall	.-332    	; 0x180 <SetupHardware>
 2cc:	80 e1       	ldi	r24, 0x10	; 16
	
int main(void) {

	SetupHardware();

	LEDs_TurnOffLEDs(LEDS_LED1);
 2ce:	53 df       	rcall	.-346    	; 0x176 <LEDs_TurnOffLEDs>
 2d0:	80 e2       	ldi	r24, 0x20	; 32
 2d2:	51 df       	rcall	.-350    	; 0x176 <LEDs_TurnOffLEDs>
	LEDs_TurnOffLEDs(LEDS_LED2);
 2d4:	78 94       	sei
 2d6:	78 94       	sei
 2d8:	80 91 1d 01 	lds	r24, 0x011D
	GlobalInterruptEnable();

	sei();
 2dc:	88 23       	and	r24, r24
	
	for (;;) { 
		
		if (tx_ticks) 
 2de:	21 f0       	breq	.+8      	; 0x2e8 <main+0x1e>
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	80 93 1d 01 	sts	0x011D, r24
			tx_ticks--;
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <main+0x22>
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	45 df       	rcall	.-374    	; 0x176 <LEDs_TurnOffLEDs>
 2ec:	80 91 1c 01 	lds	r24, 0x011C
		else if (tx_ticks == 0)
			LEDs_TurnOffLEDs(LEDS_LED1);		
 2f0:	88 23       	and	r24, r24
 2f2:	21 f0       	breq	.+8      	; 0x2fc <main+0x32>
							
		if (rx_ticks) 
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	80 93 1c 01 	sts	0x011C, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <main+0x36>
			rx_ticks--;
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	3b df       	rcall	.-394    	; 0x176 <LEDs_TurnOffLEDs>
 300:	8c df       	rcall	.-232    	; 0x21a <MIDI_IN>
 302:	b9 df       	rcall	.-142    	; 0x276 <MIDI_OUT>
		else if (rx_ticks == 0)
			LEDs_TurnOffLEDs(LEDS_LED2);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	7c d5       	rcall	.+2808   	; 0xe02 <MIDI_Device_USBTask>
		
		MIDI_IN();
 30a:	13 d5       	rcall	.+2598   	; 0xd32 <USB_USBTask>
 30c:	e5 cf       	rjmp	.-54     	; 0x2d8 <main+0xe>

0000030e <__vector_25>:
		MIDI_OUT(); 
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0

		MIDI_Device_USBTask(&MIDI_Interface);
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
		USB_USBTask();
 31a:	9f 93       	push	r25
 31c:	80 91 ce 00 	lds	r24, 0x00CE
ISR(USART1_RX_vect, ISR_BLOCK) {
	
	uint8_t ReceivedByte = UDR1;
			
	// Naieve MIDI parser. TODO: full MIDI protocol support. 
	if (USB_DeviceState == DEVICE_STATE_Configured) {
 320:	90 91 28 01 	lds	r25, 0x0128
 324:	94 30       	cpi	r25, 0x04	; 4
 326:	29 f5       	brne	.+74     	; 0x372 <__vector_25+0x64>
	
		if ( (ReceivedByte >> 7 ) == 1 ) {
 328:	87 ff       	sbrs	r24, 7
 32a:	0d c0       	rjmp	.+26     	; 0x346 <__vector_25+0x38>
			dCount = 0; 
 32c:	10 92 1f 01 	sts	0x011F, r1
			memset(&MIDI_FROM_ARDUINO, 0, sizeof(MIDI_EventPacket_t));
 330:	10 92 20 01 	sts	0x0120, r1
 334:	10 92 21 01 	sts	0x0121, r1
 338:	10 92 22 01 	sts	0x0122, r1
 33c:	10 92 23 01 	sts	0x0123, r1
			MIDI_FROM_ARDUINO.Data1 = ReceivedByte;
 340:	80 93 21 01 	sts	0x0121, r24
 344:	16 c0       	rjmp	.+44     	; 0x372 <__vector_25+0x64>
		}
			
		else if ( ((ReceivedByte >> 7) == 0) && (dCount == 0) ) {
 346:	87 fd       	sbrc	r24, 7
 348:	14 c0       	rjmp	.+40     	; 0x372 <__vector_25+0x64>
 34a:	90 91 1f 01 	lds	r25, 0x011F
 34e:	99 23       	and	r25, r25
 350:	31 f4       	brne	.+12     	; 0x35e <__vector_25+0x50>
			dCount = 1; 
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	90 93 1f 01 	sts	0x011F, r25
			MIDI_FROM_ARDUINO.Data2 = ReceivedByte;
 358:	80 93 22 01 	sts	0x0122, r24
 35c:	0a c0       	rjmp	.+20     	; 0x372 <__vector_25+0x64>
		}
		
		else if ( ((ReceivedByte >> 7) == 0) && (dCount == 1) ) {
 35e:	90 91 1f 01 	lds	r25, 0x011F
 362:	91 30       	cpi	r25, 0x01	; 1
 364:	31 f4       	brne	.+12     	; 0x372 <__vector_25+0x64>
			dCount = 0; 
 366:	10 92 1f 01 	sts	0x011F, r1
			MIDI_FROM_ARDUINO.Data3 = ReceivedByte;
 36a:	80 93 23 01 	sts	0x0123, r24
			complete = 1;
 36e:	90 93 1e 01 	sts	0x011E, r25
		}
		
	}
	
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 380:	92 30       	cpi	r25, 0x02	; 2
 382:	29 f0       	breq	.+10     	; 0x38e <CALLBACK_USB_GetDescriptor+0xe>
 384:	93 30       	cpi	r25, 0x03	; 3
 386:	41 f0       	breq	.+16     	; 0x398 <CALLBACK_USB_GetDescriptor+0x18>
 388:	91 30       	cpi	r25, 0x01	; 1
 38a:	e9 f4       	brne	.+58     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x46>
 38c:	17 c0       	rjmp	.+46     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 38e:	85 e6       	ldi	r24, 0x65	; 101
 390:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 392:	e0 ec       	ldi	r30, 0xC0	; 192
 394:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 396:	1b c0       	rjmp	.+54     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	41 f0       	breq	.+16     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x2c>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	18 f0       	brcs	.+6      	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x26>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	89 f4       	brne	.+34     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x46>
 3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3a6:	ec eb       	ldi	r30, 0xBC	; 188
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3ac:	ea ea       	ldi	r30, 0xAA	; 170
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3b2:	e8 e9       	ldi	r30, 0x98	; 152
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	84 91       	lpm	r24, Z
 3b8:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3bc:	82 e1       	ldi	r24, 0x12	; 18
 3be:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 3c0:	e5 e2       	ldi	r30, 0x25	; 37
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3ca:	e0 e0       	ldi	r30, 0x00	; 0
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3ce:	da 01       	movw	r26, r20
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	fc 93       	st	X, r31
 3d4:	ee 93       	st	-X, r30
	return Size;
}
 3d6:	08 95       	ret

000003d8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 3d8:	af 92       	push	r10
 3da:	bf 92       	push	r11
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
 3ec:	7b 01       	movw	r14, r22
 3ee:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 3f0:	de d1       	rcall	.+956    	; 0x7ae <Endpoint_WaitUntilReady>
 3f2:	18 2f       	mov	r17, r24
 3f4:	88 23       	and	r24, r24
 3f6:	a9 f5       	brne	.+106    	; 0x462 <Endpoint_Write_Stream_LE+0x8a>
 3f8:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 3fa:	d1 04       	cpc	r13, r1
 3fc:	39 f0       	breq	.+14     	; 0x40c <Endpoint_Write_Stream_LE+0x34>
 3fe:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 400:	20 81       	ld	r18, Z
 402:	31 81       	ldd	r19, Z+1	; 0x01
 404:	e2 1a       	sub	r14, r18
 406:	f3 0a       	sbc	r15, r19
 408:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 40a:	d3 1f       	adc	r29, r19
 40c:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 40e:	bb 24       	eor	r11, r11
 410:	23 c0       	rjmp	.+70     	; 0x458 <Endpoint_Write_Stream_LE+0x80>
 412:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 416:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 418:	16 c0       	rjmp	.+44     	; 0x446 <Endpoint_Write_Stream_LE+0x6e>
 41a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 41e:	8e 77       	andi	r24, 0x7E	; 126
 420:	80 93 e8 00 	sts	0x00E8, r24
 424:	86 d4       	rcall	.+2316   	; 0xd32 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 426:	c1 14       	cp	r12, r1
 428:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 42a:	49 f0       	breq	.+18     	; 0x43e <Endpoint_Write_Stream_LE+0x66>
 42c:	f6 01       	movw	r30, r12
 42e:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	8a 0d       	add	r24, r10
 434:	9b 1d       	adc	r25, r11
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	80 83       	st	Z, r24
 43a:	15 e0       	ldi	r17, 0x05	; 5
 43c:	12 c0       	rjmp	.+36     	; 0x462 <Endpoint_Write_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 43e:	b7 d1       	rcall	.+878    	; 0x7ae <Endpoint_WaitUntilReady>
 440:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 442:	51 f0       	breq	.+20     	; 0x458 <Endpoint_Write_Stream_LE+0x80>
 444:	0d c0       	rjmp	.+26     	; 0x460 <Endpoint_Write_Stream_LE+0x88>
 446:	89 91       	ld	r24, Y+
 448:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 44c:	08 94       	sec
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 44e:	e1 08       	sbc	r14, r1
 450:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 452:	08 94       	sec
 454:	a1 1c       	adc	r10, r1
 456:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 458:	e1 14       	cp	r14, r1
 45a:	f1 04       	cpc	r15, r1
 45c:	d1 f6       	brne	.-76     	; 0x412 <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 45e:	01 c0       	rjmp	.+2      	; 0x462 <Endpoint_Write_Stream_LE+0x8a>
 460:	18 2f       	mov	r17, r24
 462:	81 2f       	mov	r24, r17
 464:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 466:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 468:	1f 91       	pop	r17
 46a:	ff 90       	pop	r15
 46c:	ef 90       	pop	r14
 46e:	df 90       	pop	r13
 470:	cf 90       	pop	r12
 472:	bf 90       	pop	r11
 474:	af 90       	pop	r10
 476:	08 95       	ret

00000478 <Endpoint_Read_Stream_LE>:
 478:	af 92       	push	r10
 47a:	bf 92       	push	r11
 47c:	cf 92       	push	r12
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 47e:	df 92       	push	r13
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	ec 01       	movw	r28, r24
 48c:	7b 01       	movw	r14, r22
 48e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 490:	8e d1       	rcall	.+796    	; 0x7ae <Endpoint_WaitUntilReady>
 492:	18 2f       	mov	r17, r24
 494:	88 23       	and	r24, r24
 496:	a9 f5       	brne	.+106    	; 0x502 <Endpoint_Read_Stream_LE+0x8a>
 498:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
 49a:	d1 04       	cpc	r13, r1
 49c:	39 f0       	breq	.+14     	; 0x4ac <Endpoint_Read_Stream_LE+0x34>
 49e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
 4a0:	20 81       	ld	r18, Z
 4a2:	31 81       	ldd	r19, Z+1	; 0x01
 4a4:	e2 1a       	sub	r14, r18
 4a6:	f3 0a       	sbc	r15, r19
 4a8:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 4aa:	d3 1f       	adc	r29, r19
 4ac:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 4ae:	bb 24       	eor	r11, r11
 4b0:	23 c0       	rjmp	.+70     	; 0x4f8 <Endpoint_Read_Stream_LE+0x80>
 4b2:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4b6:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 4b8:	16 c0       	rjmp	.+44     	; 0x4e6 <Endpoint_Read_Stream_LE+0x6e>
 4ba:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4be:	8b 77       	andi	r24, 0x7B	; 123
 4c0:	80 93 e8 00 	sts	0x00E8, r24
 4c4:	36 d4       	rcall	.+2156   	; 0xd32 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 4c6:	c1 14       	cp	r12, r1
 4c8:	d1 04       	cpc	r13, r1
			#endif

			if (BytesProcessed != NULL)
 4ca:	49 f0       	breq	.+18     	; 0x4de <Endpoint_Read_Stream_LE+0x66>
 4cc:	f6 01       	movw	r30, r12
 4ce:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
 4d0:	91 81       	ldd	r25, Z+1	; 0x01
 4d2:	8a 0d       	add	r24, r10
 4d4:	9b 1d       	adc	r25, r11
 4d6:	91 83       	std	Z+1, r25	; 0x01
 4d8:	80 83       	st	Z, r24
 4da:	15 e0       	ldi	r17, 0x05	; 5
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <Endpoint_Read_Stream_LE+0x8a>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 4de:	67 d1       	rcall	.+718    	; 0x7ae <Endpoint_WaitUntilReady>
 4e0:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4e2:	51 f0       	breq	.+20     	; 0x4f8 <Endpoint_Read_Stream_LE+0x80>
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <Endpoint_Read_Stream_LE+0x88>
 4e6:	80 91 f1 00 	lds	r24, 0x00F1
 4ea:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 4ec:	08 94       	sec
 4ee:	e1 08       	sbc	r14, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 4f0:	f1 08       	sbc	r15, r1
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 4f2:	08 94       	sec
 4f4:	a1 1c       	adc	r10, r1
 4f6:	b1 1c       	adc	r11, r1
			BytesInTransfer++;
 4f8:	e1 14       	cp	r14, r1
 4fa:	f1 04       	cpc	r15, r1
 4fc:	d1 f6       	brne	.-76     	; 0x4b2 <Endpoint_Read_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <Endpoint_Read_Stream_LE+0x8a>
 500:	18 2f       	mov	r17, r24
 502:	81 2f       	mov	r24, r17
 504:	df 91       	pop	r29
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 506:	cf 91       	pop	r28
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 508:	1f 91       	pop	r17
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	08 95       	ret

00000518 <Endpoint_Write_Control_Stream_LE>:
 518:	20 91 2f 01 	lds	r18, 0x012F
 51c:	30 91 30 01 	lds	r19, 0x0130
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 520:	26 17       	cp	r18, r22
 522:	37 07       	cpc	r19, r23
 524:	20 f4       	brcc	.+8      	; 0x52e <Endpoint_Write_Control_Stream_LE+0x16>
 526:	b9 01       	movw	r22, r18
 528:	fc 01       	movw	r30, r24
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	37 c0       	rjmp	.+110    	; 0x59c <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 52e:	61 15       	cp	r22, r1
 530:	71 05       	cpc	r23, r1
 532:	d1 f7       	brne	.-12     	; 0x528 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 534:	20 91 e8 00 	lds	r18, 0x00E8
 538:	2e 77       	andi	r18, 0x7E	; 126
 53a:	20 93 e8 00 	sts	0x00E8, r18
 53e:	f4 cf       	rjmp	.-24     	; 0x528 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 540:	80 91 28 01 	lds	r24, 0x0128

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 544:	88 23       	and	r24, r24
 546:	09 f4       	brne	.+2      	; 0x54a <Endpoint_Write_Control_Stream_LE+0x32>
 548:	3f c0       	rjmp	.+126    	; 0x5c8 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 54a:	85 30       	cpi	r24, 0x05	; 5
 54c:	c9 f1       	breq	.+114    	; 0x5c0 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 54e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 552:	83 fd       	sbrc	r24, 3
 554:	37 c0       	rjmp	.+110    	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 556:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 55a:	82 fd       	sbrc	r24, 2
 55c:	2b c0       	rjmp	.+86     	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 55e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 562:	80 ff       	sbrs	r24, 0
 564:	1b c0       	rjmp	.+54     	; 0x59c <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 566:	80 91 f2 00 	lds	r24, 0x00F2
 56a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 56e:	06 c0       	rjmp	.+12     	; 0x57c <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 570:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 572:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 576:	61 50       	subi	r22, 0x01	; 1
 578:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 57a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 57c:	61 15       	cp	r22, r1
 57e:	71 05       	cpc	r23, r1
 580:	19 f0       	breq	.+6      	; 0x588 <Endpoint_Write_Control_Stream_LE+0x70>
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	91 05       	cpc	r25, r1
 586:	a0 f3       	brcs	.-24     	; 0x570 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	88 30       	cpi	r24, 0x08	; 8
 58c:	91 05       	cpc	r25, r1
 58e:	09 f0       	breq	.+2      	; 0x592 <Endpoint_Write_Control_Stream_LE+0x7a>
 590:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 592:	80 91 e8 00 	lds	r24, 0x00E8
 596:	8e 77       	andi	r24, 0x7E	; 126
 598:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 59c:	61 15       	cp	r22, r1
 59e:	71 05       	cpc	r23, r1
 5a0:	79 f6       	brne	.-98     	; 0x540 <Endpoint_Write_Control_Stream_LE+0x28>
 5a2:	22 23       	and	r18, r18
 5a4:	69 f6       	brne	.-102    	; 0x540 <Endpoint_Write_Control_Stream_LE+0x28>
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5a8:	80 91 28 01 	lds	r24, 0x0128

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5ac:	88 23       	and	r24, r24
 5ae:	61 f0       	breq	.+24     	; 0x5c8 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5b0:	85 30       	cpi	r24, 0x05	; 5
 5b2:	61 f0       	breq	.+24     	; 0x5cc <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5b4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5b8:	82 ff       	sbrs	r24, 2
 5ba:	f6 cf       	rjmp	.-20     	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5cc:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5ce:	08 95       	ret

000005d0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5d0:	20 91 2f 01 	lds	r18, 0x012F
 5d4:	30 91 30 01 	lds	r19, 0x0130
 5d8:	26 17       	cp	r18, r22
 5da:	37 07       	cpc	r19, r23
 5dc:	20 f4       	brcc	.+8      	; 0x5e6 <Endpoint_Write_Control_PStream_LE+0x16>
 5de:	b9 01       	movw	r22, r18
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	38 c0       	rjmp	.+112    	; 0x656 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5e6:	61 15       	cp	r22, r1
 5e8:	71 05       	cpc	r23, r1
 5ea:	d1 f7       	brne	.-12     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5ec:	20 91 e8 00 	lds	r18, 0x00E8
 5f0:	2e 77       	andi	r18, 0x7E	; 126
 5f2:	20 93 e8 00 	sts	0x00E8, r18
 5f6:	f4 cf       	rjmp	.-24     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5f8:	80 91 28 01 	lds	r24, 0x0128

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5fc:	88 23       	and	r24, r24
 5fe:	09 f4       	brne	.+2      	; 0x602 <Endpoint_Write_Control_PStream_LE+0x32>
 600:	40 c0       	rjmp	.+128    	; 0x682 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 602:	85 30       	cpi	r24, 0x05	; 5
 604:	d1 f1       	breq	.+116    	; 0x67a <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 606:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 60a:	83 fd       	sbrc	r24, 3
 60c:	38 c0       	rjmp	.+112    	; 0x67e <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 60e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 612:	82 fd       	sbrc	r24, 2
 614:	2c c0       	rjmp	.+88     	; 0x66e <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 616:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 61a:	80 ff       	sbrs	r24, 0
 61c:	1c c0       	rjmp	.+56     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 61e:	80 91 f2 00 	lds	r24, 0x00F2
 622:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 626:	07 c0       	rjmp	.+14     	; 0x636 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 628:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 62a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 62e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 630:	61 50       	subi	r22, 0x01	; 1
 632:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 634:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 636:	61 15       	cp	r22, r1
 638:	71 05       	cpc	r23, r1
 63a:	19 f0       	breq	.+6      	; 0x642 <Endpoint_Write_Control_PStream_LE+0x72>
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	91 05       	cpc	r25, r1
 640:	98 f3       	brcs	.-26     	; 0x628 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	88 30       	cpi	r24, 0x08	; 8
 646:	91 05       	cpc	r25, r1
 648:	09 f0       	breq	.+2      	; 0x64c <Endpoint_Write_Control_PStream_LE+0x7c>
 64a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 64c:	80 91 e8 00 	lds	r24, 0x00E8
 650:	8e 77       	andi	r24, 0x7E	; 126
 652:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 656:	61 15       	cp	r22, r1
 658:	71 05       	cpc	r23, r1
 65a:	71 f6       	brne	.-100    	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x28>
 65c:	22 23       	and	r18, r18
 65e:	61 f6       	brne	.-104    	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x28>
 660:	06 c0       	rjmp	.+12     	; 0x66e <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 662:	80 91 28 01 	lds	r24, 0x0128

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 666:	88 23       	and	r24, r24
 668:	61 f0       	breq	.+24     	; 0x682 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 66a:	85 30       	cpi	r24, 0x05	; 5
 66c:	61 f0       	breq	.+24     	; 0x686 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 66e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 672:	82 ff       	sbrs	r24, 2
 674:	f6 cf       	rjmp	.-20     	; 0x662 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 686:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 688:	08 95       	ret

0000068a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 68a:	98 2f       	mov	r25, r24
 68c:	2a c0       	rjmp	.+84     	; 0x6e2 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 68e:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 692:	98 17       	cp	r25, r24
 694:	39 f0       	breq	.+14     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 696:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 69a:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 69e:	50 91 f0 00 	lds	r21, 0x00F0
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 6a4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 6a6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 6a8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 6aa:	21 ff       	sbrs	r18, 1
 6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 6ae:	30 91 eb 00 	lds	r19, 0x00EB
 6b2:	3e 7f       	andi	r19, 0xFE	; 254
 6b4:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 6b8:	30 91 ed 00 	lds	r19, 0x00ED
 6bc:	3d 7f       	andi	r19, 0xFD	; 253
 6be:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 6c2:	30 91 eb 00 	lds	r19, 0x00EB
 6c6:	31 60       	ori	r19, 0x01	; 1
 6c8:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 6cc:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 6d0:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 6d4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 6d8:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 6dc:	27 ff       	sbrs	r18, 7
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 6e0:	9f 5f       	subi	r25, 0xFF	; 255
 6e2:	97 30       	cpi	r25, 0x07	; 7
 6e4:	a0 f2       	brcs	.-88     	; 0x68e <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 6e6:	8f 70       	andi	r24, 0x0F	; 15
 6e8:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 6f2:	08 95       	ret

000006f4 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 6fe:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 700:	00 e0       	ldi	r16, 0x00	; 0
 702:	2a c0       	rjmp	.+84     	; 0x758 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
 704:	98 81       	ld	r25, Y
 706:	99 23       	and	r25, r25
 708:	29 f1       	breq	.+74     	; 0x754 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 70a:	6b 81       	ldd	r22, Y+3	; 0x03
 70c:	e9 81       	ldd	r30, Y+1	; 0x01
 70e:	fa 81       	ldd	r31, Y+2	; 0x02
 710:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 712:	89 2f       	mov	r24, r25
 714:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 716:	87 30       	cpi	r24, 0x07	; 7
 718:	18 f5       	brcc	.+70     	; 0x760 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 71a:	62 95       	swap	r22
 71c:	66 0f       	add	r22, r22
 71e:	66 0f       	add	r22, r22
 720:	60 7c       	andi	r22, 0xC0	; 192
 722:	99 1f       	adc	r25, r25
 724:	99 27       	eor	r25, r25
 726:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 728:	69 2b       	or	r22, r25
 72a:	22 30       	cpi	r18, 0x02	; 2
 72c:	10 f0       	brcs	.+4      	; 0x732 <Endpoint_ConfigureEndpointTable+0x3e>
 72e:	96 e0       	ldi	r25, 0x06	; 6
 730:	01 c0       	rjmp	.+2      	; 0x734 <Endpoint_ConfigureEndpointTable+0x40>
 732:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 734:	28 e0       	ldi	r18, 0x08	; 8
 736:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	03 c0       	rjmp	.+6      	; 0x742 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 73c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 73e:	22 0f       	add	r18, r18
 740:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 742:	2e 17       	cp	r18, r30
 744:	3f 07       	cpc	r19, r31
 746:	d0 f3       	brcs	.-12     	; 0x73c <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 748:	42 95       	swap	r20
 74a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 74c:	49 2b       	or	r20, r25
 74e:	9d df       	rcall	.-198    	; 0x68a <Endpoint_ConfigureEndpoint_Prv>
 750:	88 23       	and	r24, r24
 752:	31 f0       	breq	.+12     	; 0x760 <Endpoint_ConfigureEndpointTable+0x6c>
 754:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 756:	25 96       	adiw	r28, 0x05	; 5
 758:	01 17       	cp	r16, r17
 75a:	a1 f6       	brne	.-88     	; 0x704 <Endpoint_ConfigureEndpointTable+0x10>
 75c:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 75e:	01 c0       	rjmp	.+2      	; 0x762 <Endpoint_ConfigureEndpointTable+0x6e>
 760:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 762:	df 91       	pop	r29
	}
	
	return true;
}
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <Endpoint_ClearStatusStage>:
 76c:	80 91 29 01 	lds	r24, 0x0129
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 770:	87 ff       	sbrs	r24, 7
 772:	13 c0       	rjmp	.+38     	; 0x79a <Endpoint_ClearStatusStage+0x2e>
 774:	04 c0       	rjmp	.+8      	; 0x77e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 776:	80 91 28 01 	lds	r24, 0x0128
 77a:	88 23       	and	r24, r24
 77c:	b9 f0       	breq	.+46     	; 0x7ac <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 782:	82 ff       	sbrs	r24, 2
 784:	f8 cf       	rjmp	.-16     	; 0x776 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 786:	80 91 e8 00 	lds	r24, 0x00E8
 78a:	8b 77       	andi	r24, 0x7B	; 123
 78c:	80 93 e8 00 	sts	0x00E8, r24
 790:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 792:	80 91 28 01 	lds	r24, 0x0128
 796:	88 23       	and	r24, r24
 798:	49 f0       	breq	.+18     	; 0x7ac <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 79a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 79e:	80 ff       	sbrs	r24, 0
 7a0:	f8 cf       	rjmp	.-16     	; 0x792 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7a2:	80 91 e8 00 	lds	r24, 0x00E8
 7a6:	8e 77       	andi	r24, 0x7E	; 126
 7a8:	80 93 e8 00 	sts	0x00E8, r24
 7ac:	08 95       	ret

000007ae <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 7ae:	80 91 e4 00 	lds	r24, 0x00E4
 7b2:	90 91 e5 00 	lds	r25, 0x00E5
 7b6:	45 e6       	ldi	r20, 0x65	; 101
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <Endpoint_WaitUntilReady+0xe>
 7ba:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 7bc:	20 91 ec 00 	lds	r18, 0x00EC
 7c0:	20 ff       	sbrs	r18, 0
 7c2:	23 c0       	rjmp	.+70     	; 0x80a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7c4:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 7c8:	20 fd       	sbrc	r18, 0
 7ca:	15 c0       	rjmp	.+42     	; 0x7f6 <Endpoint_WaitUntilReady+0x48>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7cc:	20 91 28 01 	lds	r18, 0x0128

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7d0:	22 23       	and	r18, r18
 7d2:	99 f0       	breq	.+38     	; 0x7fa <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7d4:	25 30       	cpi	r18, 0x05	; 5
 7d6:	99 f0       	breq	.+38     	; 0x7fe <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 7d8:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 7dc:	25 fd       	sbrc	r18, 5
 7de:	11 c0       	rjmp	.+34     	; 0x802 <Endpoint_WaitUntilReady+0x54>
 7e0:	20 91 e4 00 	lds	r18, 0x00E4
 7e4:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 7e8:	28 17       	cp	r18, r24
 7ea:	39 07       	cpc	r19, r25
 7ec:	39 f3       	breq	.-50     	; 0x7bc <Endpoint_WaitUntilReady+0xe>
 7ee:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 7f0:	21 f7       	brne	.-56     	; 0x7ba <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 806:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 808:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 80a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 80e:	22 ff       	sbrs	r18, 2
 810:	dd cf       	rjmp	.-70     	; 0x7cc <Endpoint_WaitUntilReady+0x1e>
 812:	f9 cf       	rjmp	.-14     	; 0x806 <Endpoint_WaitUntilReady+0x58>

00000814 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 81c:	4e d0       	rcall	.+156    	; 0x8ba <USB_INT_DisableAllInterrupts>
 81e:	55 d0       	rcall	.+170    	; 0x8ca <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 820:	c8 ed       	ldi	r28, 0xD8	; 216
 822:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 824:	88 81       	ld	r24, Y
 826:	8f 77       	andi	r24, 0x7F	; 127
 828:	88 83       	st	Y, r24
 82a:	88 81       	ld	r24, Y
 82c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
 82e:	88 83       	st	Y, r24
 830:	88 81       	ld	r24, Y
 832:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 834:	88 83       	st	Y, r24
 836:	e7 ed       	ldi	r30, 0xD7	; 215
 838:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 83a:	80 81       	ld	r24, Z
 83c:	80 68       	ori	r24, 0x80	; 128
 83e:	80 83       	st	Z, r24
 840:	19 bc       	out	0x29, r1	; 41
 842:	10 92 28 01 	sts	0x0128, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 846:	10 92 24 01 	sts	0x0124, r1
	USB_Device_ConfigurationNumber  = 0;
 84a:	10 92 26 01 	sts	0x0126, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 84e:	10 92 25 01 	sts	0x0125, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 852:	00 ee       	ldi	r16, 0xE0	; 224
 854:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 856:	f8 01       	movw	r30, r16
 858:	80 81       	ld	r24, Z
 85a:	8b 7f       	andi	r24, 0xFB	; 251
 85c:	80 83       	st	Z, r24
 85e:	88 81       	ld	r24, Y
 860:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 862:	88 83       	st	Y, r24
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 868:	42 e0       	ldi	r20, 0x02	; 2
 86a:	0f df       	rcall	.-482    	; 0x68a <Endpoint_ConfigureEndpoint_Prv>
 86c:	e1 ee       	ldi	r30, 0xE1	; 225
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 872:	8e 7f       	andi	r24, 0xFE	; 254
 874:	80 83       	st	Z, r24
 876:	e2 ee       	ldi	r30, 0xE2	; 226
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	80 83       	st	Z, r24
 880:	80 81       	ld	r24, Z
 882:	88 60       	ori	r24, 0x08	; 8
 884:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 886:	f8 01       	movw	r30, r16
 888:	80 81       	ld	r24, Z
 88a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 88c:	80 83       	st	Z, r24
 88e:	88 81       	ld	r24, Y
 890:	80 61       	ori	r24, 0x10	; 16
 892:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <USB_Init>:
 89e:	e8 ed       	ldi	r30, 0xD8	; 216
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 8a4:	8f 7e       	andi	r24, 0xEF	; 239
 8a6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 8a8:	e7 ed       	ldi	r30, 0xD7	; 215
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	80 93 27 01 	sts	0x0127, r24

	USB_ResetInterface();
 8b8:	ad cf       	rjmp	.-166    	; 0x814 <USB_ResetInterface>

000008ba <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 8ba:	e8 ed       	ldi	r30, 0xD8	; 216
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	8c 7f       	andi	r24, 0xFC	; 252
 8c2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 8c4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 8c8:	08 95       	ret

000008ca <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 8ca:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 8ce:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 8d2:	08 95       	ret

000008d4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	0b b6       	in	r0, 0x3b	; 59
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	4f 93       	push	r20
 8e8:	5f 93       	push	r21
 8ea:	6f 93       	push	r22
 8ec:	7f 93       	push	r23
 8ee:	8f 93       	push	r24
 8f0:	9f 93       	push	r25
 8f2:	af 93       	push	r26
 8f4:	bf 93       	push	r27
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 8fa:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8fe:	82 ff       	sbrs	r24, 2
 900:	0a c0       	rjmp	.+20     	; 0x916 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 902:	80 91 e2 00 	lds	r24, 0x00E2
 906:	82 ff       	sbrs	r24, 2
 908:	06 c0       	rjmp	.+12     	; 0x916 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 90a:	80 91 e1 00 	lds	r24, 0x00E1
 90e:	8b 7f       	andi	r24, 0xFB	; 251
 910:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 914:	0d d2       	rcall	.+1050   	; 0xd30 <USB_Event_Stub>
 916:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 91a:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 91c:	1d c0       	rjmp	.+58     	; 0x958 <__vector_10+0x84>
 91e:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 922:	80 ff       	sbrs	r24, 0
 924:	19 c0       	rjmp	.+50     	; 0x958 <__vector_10+0x84>
 926:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 92a:	8e 7f       	andi	r24, 0xFE	; 254
 92c:	80 93 da 00 	sts	0x00DA, r24
 930:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 934:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 936:	0c c0       	rjmp	.+24     	; 0x950 <__vector_10+0x7c>
 938:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 93a:	89 bd       	out	0x29, r24	; 41
 93c:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 93e:	89 bd       	out	0x29, r24	; 41
 940:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 942:	00 fe       	sbrs	r0, 0
 944:	fd cf       	rjmp	.-6      	; 0x940 <__vector_10+0x6c>
 946:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 948:	80 93 28 01 	sts	0x0128, r24
 94c:	4e dc       	rcall	.-1892   	; 0x1ea <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
 94e:	04 c0       	rjmp	.+8      	; 0x958 <__vector_10+0x84>
 950:	19 bc       	out	0x29, r1	; 41
 952:	10 92 28 01 	sts	0x0128, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 956:	4e dc       	rcall	.-1892   	; 0x1f4 <EVENT_USB_Device_Disconnect>
 958:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
 95c:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 95e:	18 c0       	rjmp	.+48     	; 0x990 <__vector_10+0xbc>
 960:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 964:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 966:	14 c0       	rjmp	.+40     	; 0x990 <__vector_10+0xbc>
 968:	80 91 e2 00 	lds	r24, 0x00E2
 96c:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 96e:	80 93 e2 00 	sts	0x00E2, r24
 972:	80 91 e2 00 	lds	r24, 0x00E2
 976:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 978:	80 93 e2 00 	sts	0x00E2, r24
 97c:	80 91 d8 00 	lds	r24, 0x00D8
 980:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 982:	80 93 d8 00 	sts	0x00D8, r24
 986:	19 bc       	out	0x29, r1	; 41
 988:	85 e0       	ldi	r24, 0x05	; 5
 98a:	80 93 28 01 	sts	0x0128, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 98e:	d0 d1       	rcall	.+928    	; 0xd30 <USB_Event_Stub>
 990:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
 994:	84 ff       	sbrs	r24, 4
 996:	2d c0       	rjmp	.+90     	; 0x9f2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 998:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 99c:	84 ff       	sbrs	r24, 4
 99e:	29 c0       	rjmp	.+82     	; 0x9f2 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 9a0:	8c e0       	ldi	r24, 0x0C	; 12
 9a2:	89 bd       	out	0x29, r24	; 41
 9a4:	8e e0       	ldi	r24, 0x0E	; 14
 9a6:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9a8:	09 b4       	in	r0, 0x29	; 41
 9aa:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <__vector_10+0xd4>
 9ae:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9b2:	8f 7d       	andi	r24, 0xDF	; 223
 9b4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9b8:	80 91 e1 00 	lds	r24, 0x00E1
 9bc:	8f 7e       	andi	r24, 0xEF	; 239
 9be:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 9c2:	80 91 e2 00 	lds	r24, 0x00E2
 9c6:	8f 7e       	andi	r24, 0xEF	; 239
 9c8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 9cc:	80 91 e2 00 	lds	r24, 0x00E2
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9d6:	80 91 24 01 	lds	r24, 0x0124
 9da:	88 23       	and	r24, r24
 9dc:	21 f4       	brne	.+8      	; 0x9e6 <__vector_10+0x112>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 9de:	80 91 e3 00 	lds	r24, 0x00E3
 9e2:	87 ff       	sbrs	r24, 7
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9e6:	84 e0       	ldi	r24, 0x04	; 4
 9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__vector_10+0x118>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	80 93 28 01 	sts	0x0128, r24
 9f0:	9f d1       	rcall	.+830    	; 0xd30 <USB_Event_Stub>
 9f2:	80 91 e1 00 	lds	r24, 0x00E1
 9f6:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 9f8:	22 c0       	rjmp	.+68     	; 0xa3e <__vector_10+0x16a>
 9fa:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 9fe:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a00:	1e c0       	rjmp	.+60     	; 0xa3e <__vector_10+0x16a>
 a02:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a06:	87 7f       	andi	r24, 0xF7	; 247
 a08:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a0c:	82 e0       	ldi	r24, 0x02	; 2
 a0e:	80 93 28 01 	sts	0x0128, r24
 a12:	10 92 24 01 	sts	0x0124, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a16:	80 91 e1 00 	lds	r24, 0x00E1
 a1a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
 a1c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a20:	80 91 e2 00 	lds	r24, 0x00E2
 a24:	8e 7f       	andi	r24, 0xFE	; 254
 a26:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a2a:	80 91 e2 00 	lds	r24, 0x00E2
 a2e:	80 61       	ori	r24, 0x10	; 16
 a30:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	42 e0       	ldi	r20, 0x02	; 2
 a3a:	27 de       	rcall	.-946    	; 0x68a <Endpoint_ConfigureEndpoint_Prv>
 a3c:	79 d1       	rcall	.+754    	; 0xd30 <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a3e:	ff 91       	pop	r31
 a40:	ef 91       	pop	r30
 a42:	bf 91       	pop	r27
 a44:	af 91       	pop	r26
 a46:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 a48:	8f 91       	pop	r24
 a4a:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 a4c:	6f 91       	pop	r22
 a4e:	5f 91       	pop	r21
 a50:	4f 91       	pop	r20
 a52:	3f 91       	pop	r19
 a54:	2f 91       	pop	r18
 a56:	0f 90       	pop	r0
 a58:	0b be       	out	0x3b, r0	; 59
 a5a:	0f 90       	pop	r0
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	0f 90       	pop	r0
 a60:	1f 90       	pop	r1
 a62:	18 95       	reti

00000a64 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a64:	1f 93       	push	r17
 a66:	cf 93       	push	r28
 a68:	df 93       	push	r29
 a6a:	cd b7       	in	r28, 0x3d	; 61
 a6c:	de b7       	in	r29, 0x3e	; 62
 a6e:	ac 97       	sbiw	r28, 0x2c	; 44
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a7a:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 a7c:	e9 e2       	ldi	r30, 0x29	; 41
 a7e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a80:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a84:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a86:	8f 5f       	subi	r24, 0xFF	; 255
 a88:	88 30       	cpi	r24, 0x08	; 8
 a8a:	d1 f7       	brne	.-12     	; 0xa80 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 a8c:	c5 db       	rcall	.-2166   	; 0x218 <EVENT_USB_Device_ControlRequest>
 a8e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a92:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
 a94:	35 c1       	rjmp	.+618    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 a96:	80 91 29 01 	lds	r24, 0x0129
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a9a:	20 91 2a 01 	lds	r18, 0x012A

		switch (USB_ControlRequest.bRequest)
 a9e:	25 30       	cpi	r18, 0x05	; 5
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <USB_Device_ProcessControlRequest+0x40>
 aa2:	84 c0       	rjmp	.+264    	; 0xbac <USB_Device_ProcessControlRequest+0x148>
 aa4:	26 30       	cpi	r18, 0x06	; 6
 aa6:	40 f4       	brcc	.+16     	; 0xab8 <USB_Device_ProcessControlRequest+0x54>
 aa8:	21 30       	cpi	r18, 0x01	; 1
 aaa:	a1 f1       	breq	.+104    	; 0xb14 <USB_Device_ProcessControlRequest+0xb0>
 aac:	21 30       	cpi	r18, 0x01	; 1
 aae:	70 f0       	brcs	.+28     	; 0xacc <USB_Device_ProcessControlRequest+0x68>
 ab0:	23 30       	cpi	r18, 0x03	; 3
 ab2:	09 f0       	breq	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0x52>
 ab4:	25 c1       	rjmp	.+586    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 ab6:	2e c0       	rjmp	.+92     	; 0xb14 <USB_Device_ProcessControlRequest+0xb0>
 ab8:	28 30       	cpi	r18, 0x08	; 8
 aba:	09 f4       	brne	.+2      	; 0xabe <USB_Device_ProcessControlRequest+0x5a>
 abc:	f3 c0       	rjmp	.+486    	; 0xca4 <USB_Device_ProcessControlRequest+0x240>
 abe:	29 30       	cpi	r18, 0x09	; 9
 ac0:	09 f4       	brne	.+2      	; 0xac4 <USB_Device_ProcessControlRequest+0x60>
 ac2:	02 c1       	rjmp	.+516    	; 0xcc8 <USB_Device_ProcessControlRequest+0x264>
 ac4:	26 30       	cpi	r18, 0x06	; 6
 ac6:	09 f0       	breq	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0x66>
 ac8:	1b c1       	rjmp	.+566    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 aca:	93 c0       	rjmp	.+294    	; 0xbf2 <USB_Device_ProcessControlRequest+0x18e>
 acc:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ace:	21 f0       	breq	.+8      	; 0xad8 <USB_Device_ProcessControlRequest+0x74>
 ad0:	82 38       	cpi	r24, 0x82	; 130
 ad2:	09 f0       	breq	.+2      	; 0xad6 <USB_Device_ProcessControlRequest+0x72>
 ad4:	15 c1       	rjmp	.+554    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 ad6:	08 c0       	rjmp	.+16     	; 0xae8 <USB_Device_ProcessControlRequest+0x84>
 ad8:	80 91 25 01 	lds	r24, 0x0125
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 adc:	90 91 26 01 	lds	r25, 0x0126
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 ae0:	99 23       	and	r25, r25
 ae2:	71 f0       	breq	.+28     	; 0xb00 <USB_Device_ProcessControlRequest+0x9c>
 ae4:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ae6:	0c c0       	rjmp	.+24     	; 0xb00 <USB_Device_ProcessControlRequest+0x9c>
 ae8:	80 91 2d 01 	lds	r24, 0x012D
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 aec:	8f 70       	andi	r24, 0x0F	; 15
 aee:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 af2:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 af6:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
 af8:	95 ff       	sbrs	r25, 5
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b00:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b04:	97 7f       	andi	r25, 0xF7	; 247
 b06:	90 93 e8 00 	sts	0x00E8, r25
 b0a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b0e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
 b12:	d3 c0       	rjmp	.+422    	; 0xcba <USB_Device_ProcessControlRequest+0x256>
 b14:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b16:	19 f0       	breq	.+6      	; 0xb1e <USB_Device_ProcessControlRequest+0xba>
 b18:	82 30       	cpi	r24, 0x02	; 2
 b1a:	09 f0       	breq	.+2      	; 0xb1e <USB_Device_ProcessControlRequest+0xba>
 b1c:	f1 c0       	rjmp	.+482    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 b1e:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b20:	8f 71       	andi	r24, 0x1F	; 31
 b22:	90 70       	andi	r25, 0x00	; 0
 b24:	00 97       	sbiw	r24, 0x00	; 0
 b26:	29 f0       	breq	.+10     	; 0xb32 <USB_Device_ProcessControlRequest+0xce>
 b28:	82 30       	cpi	r24, 0x02	; 2
 b2a:	91 05       	cpc	r25, r1
 b2c:	09 f0       	breq	.+2      	; 0xb30 <USB_Device_ProcessControlRequest+0xcc>
 b2e:	e8 c0       	rjmp	.+464    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 b30:	0b c0       	rjmp	.+22     	; 0xb48 <USB_Device_ProcessControlRequest+0xe4>
 b32:	80 91 2b 01 	lds	r24, 0x012B
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 b36:	81 30       	cpi	r24, 0x01	; 1
 b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0xd8>
 b3a:	e2 c0       	rjmp	.+452    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 b3c:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0xde>
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	80 93 26 01 	sts	0x0126, r24
 b46:	2c c0       	rjmp	.+88     	; 0xba0 <USB_Device_ProcessControlRequest+0x13c>
 b48:	80 91 2b 01 	lds	r24, 0x012B

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 b4c:	88 23       	and	r24, r24
 b4e:	41 f5       	brne	.+80     	; 0xba0 <USB_Device_ProcessControlRequest+0x13c>
 b50:	20 91 2d 01 	lds	r18, 0x012D
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b54:	2f 70       	andi	r18, 0x0F	; 15
 b56:	09 f4       	brne	.+2      	; 0xb5a <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 b58:	d3 c0       	rjmp	.+422    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 b5a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b5e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 b62:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 b64:	1d c0       	rjmp	.+58     	; 0xba0 <USB_Device_ProcessControlRequest+0x13c>
 b66:	80 91 2a 01 	lds	r24, 0x012A
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b6a:	83 30       	cpi	r24, 0x03	; 3
 b6c:	21 f4       	brne	.+8      	; 0xb76 <USB_Device_ProcessControlRequest+0x112>
 b6e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 b72:	80 62       	ori	r24, 0x20	; 32
 b74:	13 c0       	rjmp	.+38     	; 0xb9c <USB_Device_ProcessControlRequest+0x138>
 b76:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 b7a:	80 61       	ori	r24, 0x10	; 16
 b7c:	80 93 eb 00 	sts	0x00EB, r24
 b80:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <USB_Device_ProcessControlRequest+0x126>
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	2a 95       	dec	r18
 b8c:	e2 f7       	brpl	.-8      	; 0xb86 <USB_Device_ProcessControlRequest+0x122>
 b8e:	80 93 ea 00 	sts	0x00EA, r24
 b92:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 b96:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 b9a:	88 60       	ori	r24, 0x08	; 8
 b9c:	80 93 eb 00 	sts	0x00EB, r24
 ba0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ba4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ba8:	87 7f       	andi	r24, 0xF7	; 247
 baa:	8a c0       	rjmp	.+276    	; 0xcc0 <USB_Device_ProcessControlRequest+0x25c>
 bac:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bae:	09 f0       	breq	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x14e>
 bb0:	a7 c0       	rjmp	.+334    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 bb2:	10 91 2b 01 	lds	r17, 0x012B
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 bb6:	1f 77       	andi	r17, 0x7F	; 127
 bb8:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 bbc:	80 78       	andi	r24, 0x80	; 128
 bbe:	81 2b       	or	r24, r17
 bc0:	80 93 e3 00 	sts	0x00E3, r24
 bc4:	80 91 e8 00 	lds	r24, 0x00E8
 bc8:	87 7f       	andi	r24, 0xF7	; 247
 bca:	80 93 e8 00 	sts	0x00E8, r24
 bce:	ce dd       	rcall	.-1124   	; 0x76c <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 bd0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 bd4:	80 ff       	sbrs	r24, 0
 bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
 bd8:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 bdc:	80 68       	ori	r24, 0x80	; 128
 bde:	80 93 e3 00 	sts	0x00E3, r24
 be2:	11 23       	and	r17, r17
 be4:	11 f0       	breq	.+4      	; 0xbea <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 be6:	83 e0       	ldi	r24, 0x03	; 3
 be8:	01 c0       	rjmp	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0x188>
 bea:	82 e0       	ldi	r24, 0x02	; 2
 bec:	80 93 28 01 	sts	0x0128, r24
 bf0:	87 c0       	rjmp	.+270    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 bf2:	80 58       	subi	r24, 0x80	; 128
 bf4:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bf6:	08 f0       	brcs	.+2      	; 0xbfa <USB_Device_ProcessControlRequest+0x196>
 bf8:	83 c0       	rjmp	.+262    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 bfa:	80 91 2b 01 	lds	r24, 0x012B
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 bfe:	90 91 2c 01 	lds	r25, 0x012C
 c02:	23 e0       	ldi	r18, 0x03	; 3
 c04:	8c 3d       	cpi	r24, 0xDC	; 220
 c06:	92 07       	cpc	r25, r18
 c08:	a9 f5       	brne	.+106    	; 0xc74 <USB_Device_ProcessControlRequest+0x210>
 c0a:	83 e0       	ldi	r24, 0x03	; 3
 c0c:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c0e:	8a e2       	ldi	r24, 0x2A	; 42
 c10:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c12:	5f b7       	in	r21, 0x3f	; 63
 c14:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c16:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c18:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	4e e0       	ldi	r20, 0x0E	; 14
 c20:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c22:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	60 93 57 00 	sts	0x0057, r22
 c2a:	e4 91       	lpm	r30, Z
 c2c:	80 ff       	sbrs	r24, 0
 c2e:	03 c0       	rjmp	.+6      	; 0xc36 <USB_Device_ProcessControlRequest+0x1d2>

					if (SerialCharNum & 0x01)
 c30:	e2 95       	swap	r30
 c32:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
 c34:	4f 5f       	subi	r20, 0xFF	; 255
 c36:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 c38:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	ea 30       	cpi	r30, 0x0A	; 10
 c3e:	18 f0       	brcs	.+6      	; 0xc46 <USB_Device_ProcessControlRequest+0x1e2>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c40:	29 5c       	subi	r18, 0xC9	; 201
 c42:	3f 4f       	sbci	r19, 0xFF	; 255
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <USB_Device_ProcessControlRequest+0x1e6>
 c46:	20 5d       	subi	r18, 0xD0	; 208
 c48:	3f 4f       	sbci	r19, 0xFF	; 255
 c4a:	13 96       	adiw	r26, 0x03	; 3
 c4c:	3c 93       	st	X, r19
 c4e:	2e 93       	st	-X, r18
 c50:	12 97       	sbiw	r26, 0x02	; 2
 c52:	01 96       	adiw	r24, 0x01	; 1
 c54:	12 96       	adiw	r26, 0x02	; 2
 c56:	84 31       	cpi	r24, 0x14	; 20
 c58:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c5a:	19 f7       	brne	.-58     	; 0xc22 <USB_Device_ProcessControlRequest+0x1be>
 c5c:	5f bf       	out	0x3f, r21	; 63
 c5e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c62:	87 7f       	andi	r24, 0xF7	; 247
 c64:	80 93 e8 00 	sts	0x00E8, r24
 c68:	ce 01       	movw	r24, r28
 c6a:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c6c:	6a e2       	ldi	r22, 0x2A	; 42
 c6e:	70 e0       	ldi	r23, 0x00	; 0
 c70:	53 dc       	rcall	.-1882   	; 0x518 <Endpoint_Write_Control_Stream_LE>
 c72:	12 c0       	rjmp	.+36     	; 0xc98 <USB_Device_ProcessControlRequest+0x234>
 c74:	60 91 2d 01 	lds	r22, 0x012D
 c78:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c7a:	4f 5f       	subi	r20, 0xFF	; 255
 c7c:	5f 4f       	sbci	r21, 0xFF	; 255
 c7e:	80 db       	rcall	.-2304   	; 0x380 <CALLBACK_USB_GetDescriptor>
 c80:	bc 01       	movw	r22, r24
 c82:	00 97       	sbiw	r24, 0x00	; 0
 c84:	09 f4       	brne	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0x224>
 c86:	3c c0       	rjmp	.+120    	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 c88:	80 91 e8 00 	lds	r24, 0x00E8
 c8c:	87 7f       	andi	r24, 0xF7	; 247
 c8e:	80 93 e8 00 	sts	0x00E8, r24
 c92:	89 81       	ldd	r24, Y+1	; 0x01
 c94:	9a 81       	ldd	r25, Y+2	; 0x02
 c96:	9c dc       	rcall	.-1736   	; 0x5d0 <Endpoint_Write_Control_PStream_LE>
 c98:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c9c:	8b 77       	andi	r24, 0x7B	; 123
 c9e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 ca2:	2e c0       	rjmp	.+92     	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 ca4:	80 38       	cpi	r24, 0x80	; 128
 ca6:	61 f5       	brne	.+88     	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 ca8:	80 91 e8 00 	lds	r24, 0x00E8
 cac:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 cae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb2:	80 91 24 01 	lds	r24, 0x0124
 cb6:	80 93 f1 00 	sts	0x00F1, r24
 cba:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 cbe:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cc0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cc4:	53 dd       	rcall	.-1370   	; 0x76c <Endpoint_ClearStatusStage>
 cc6:	1c c0       	rjmp	.+56     	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 cc8:	88 23       	and	r24, r24
 cca:	d1 f4       	brne	.+52     	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
 ccc:	90 91 2b 01 	lds	r25, 0x012B
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 cd0:	92 30       	cpi	r25, 0x02	; 2
 cd2:	b0 f4       	brcc	.+44     	; 0xd00 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cd4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 cd8:	87 7f       	andi	r24, 0xF7	; 247
 cda:	80 93 e8 00 	sts	0x00E8, r24
 cde:	90 93 24 01 	sts	0x0124, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ce2:	44 dd       	rcall	.-1400   	; 0x76c <Endpoint_ClearStatusStage>
 ce4:	80 91 24 01 	lds	r24, 0x0124
 ce8:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cea:	21 f4       	brne	.+8      	; 0xcf4 <USB_Device_ProcessControlRequest+0x290>
 cec:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
 cf0:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <USB_Device_ProcessControlRequest+0x294>
 cf4:	84 e0       	ldi	r24, 0x04	; 4
 cf6:	01 c0       	rjmp	.+2      	; 0xcfa <USB_Device_ProcessControlRequest+0x296>
 cf8:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 cfa:	80 93 28 01 	sts	0x0128, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cfe:	7f da       	rcall	.-2818   	; 0x1fe <EVENT_USB_Device_ConfigurationChanged>
 d00:	80 91 e8 00 	lds	r24, 0x00E8
 d04:	83 ff       	sbrs	r24, 3
 d06:	0a c0       	rjmp	.+20     	; 0xd1c <USB_Device_ProcessControlRequest+0x2b8>
 d08:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
 d0c:	87 7f       	andi	r24, 0xF7	; 247
 d0e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d12:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d16:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d18:	80 93 eb 00 	sts	0x00EB, r24
 d1c:	ac 96       	adiw	r28, 0x2c	; 44
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d22:	de bf       	out	0x3e, r29	; 62
 d24:	0f be       	out	0x3f, r0	; 63
 d26:	cd bf       	out	0x3d, r28	; 61
 d28:	df 91       	pop	r29
 d2a:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d2c:	1f 91       	pop	r17
 d2e:	08 95       	ret

00000d30 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 d30:	08 95       	ret

00000d32 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 d32:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 d34:	80 91 28 01 	lds	r24, 0x0128
 d38:	88 23       	and	r24, r24
 d3a:	a9 f0       	breq	.+42     	; 0xd66 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d3c:	80 91 e9 00 	lds	r24, 0x00E9
 d40:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d42:	90 91 ec 00 	lds	r25, 0x00EC
 d46:	90 ff       	sbrs	r25, 0
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <USB_USBTask+0x1c>
 d4a:	c0 e8       	ldi	r28, 0x80	; 128
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <USB_USBTask+0x1e>
 d4e:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d50:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d52:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d56:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d5a:	83 ff       	sbrs	r24, 3
 d5c:	01 c0       	rjmp	.+2      	; 0xd60 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 d5e:	82 de       	rcall	.-764    	; 0xa64 <USB_Device_ProcessControlRequest>
 d60:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d62:	c0 93 e9 00 	sts	0x00E9, r28
 d66:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 d68:	08 95       	ret

00000d6a <MIDI_Device_ConfigureEndpoints>:
#define  __INCLUDE_FROM_MIDI_DRIVER
#define  __INCLUDE_FROM_MIDI_DEVICE_C
#include "MIDIClassDevice.h"

bool MIDI_Device_ConfigureEndpoints(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
 d6a:	cf 93       	push	r28
 d6c:	df 93       	push	r29
 d6e:	ec 01       	movw	r28, r24
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
 d70:	1b 86       	std	Y+11, r1	; 0x0b

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
 d72:	82 e0       	ldi	r24, 0x02	; 2
 d74:	8c 83       	std	Y+4, r24	; 0x04
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
 d76:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
 d78:	ce 01       	movw	r24, r28
 d7a:	01 96       	adiw	r24, 0x01	; 1
 d7c:	61 e0       	ldi	r22, 0x01	; 1
 d7e:	ba dc       	rcall	.-1676   	; 0x6f4 <Endpoint_ConfigureEndpointTable>
 d80:	88 23       	and	r24, r24
 d82:	29 f0       	breq	.+10     	; 0xd8e <MIDI_Device_ConfigureEndpoints+0x24>
 d84:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
 d86:	06 96       	adiw	r24, 0x06	; 6
 d88:	61 e0       	ldi	r22, 0x01	; 1
 d8a:	b4 dc       	rcall	.-1688   	; 0x6f4 <Endpoint_ConfigureEndpointTable>
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <MIDI_Device_ConfigureEndpoints+0x26>
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	df 91       	pop	r29

	MIDIInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
	MIDIInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;
 d92:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&MIDIInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	return true;
}
 d94:	08 95       	ret

00000d96 <MIDI_Device_SendEventPacket>:
 d96:	fc 01       	movw	r30, r24
 d98:	cb 01       	movw	r24, r22
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d9a:	20 91 28 01 	lds	r18, 0x0128
 d9e:	24 30       	cpi	r18, 0x04	; 4
 da0:	a9 f4       	brne	.+42     	; 0xdcc <MIDI_Device_SendEventPacket+0x36>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 da2:	21 81       	ldd	r18, Z+1	; 0x01
 da4:	2f 70       	andi	r18, 0x0F	; 15
 da6:	20 93 e9 00 	sts	0x00E9, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
 daa:	64 e0       	ldi	r22, 0x04	; 4
 dac:	70 e0       	ldi	r23, 0x00	; 0
 dae:	40 e0       	ldi	r20, 0x00	; 0
 db0:	50 e0       	ldi	r21, 0x00	; 0
 db2:	12 db       	rcall	.-2524   	; 0x3d8 <Endpoint_Write_Stream_LE>
 db4:	88 23       	and	r24, r24
 db6:	59 f4       	brne	.+22     	; 0xdce <MIDI_Device_SendEventPacket+0x38>
 db8:	90 91 e8 00 	lds	r25, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 dbc:	95 fd       	sbrc	r25, 5
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
 dbe:	07 c0       	rjmp	.+14     	; 0xdce <MIDI_Device_SendEventPacket+0x38>
 dc0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dc4:	9e 77       	andi	r25, 0x7E	; 126
 dc6:	90 93 e8 00 	sts	0x00E8, r25
 dca:	08 95       	ret
 dcc:	82 e0       	ldi	r24, 0x02	; 2

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 dce:	08 95       	ret

00000dd0 <MIDI_Device_Flush>:

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
}
 dd0:	20 91 28 01 	lds	r18, 0x0128

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 dd4:	24 30       	cpi	r18, 0x04	; 4
 dd6:	89 f4       	brne	.+34     	; 0xdfa <MIDI_Device_Flush+0x2a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dd8:	fc 01       	movw	r30, r24
 dda:	81 81       	ldd	r24, Z+1	; 0x01
 ddc:	8f 70       	andi	r24, 0x0F	; 15
 dde:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 de2:	80 91 f2 00 	lds	r24, 0x00F2
 de6:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
 dea:	00 97       	sbiw	r24, 0x00	; 0
 dec:	41 f0       	breq	.+16     	; 0xdfe <MIDI_Device_Flush+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dee:	80 91 e8 00 	lds	r24, 0x00E8
 df2:	8e 77       	andi	r24, 0x7E	; 126
 df4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 df8:	da cc       	rjmp	.-1612   	; 0x7ae <Endpoint_WaitUntilReady>
 dfa:	82 e0       	ldi	r24, 0x02	; 2
 dfc:	08 95       	ret
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	08 95       	ret

00000e02 <MIDI_Device_USBTask>:

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
 e02:	20 91 28 01 	lds	r18, 0x0128
	return true;
}

void MIDI_Device_USBTask(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e06:	24 30       	cpi	r18, 0x04	; 4
 e08:	51 f4       	brne	.+20     	; 0xe1e <MIDI_Device_USBTask+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e0a:	fc 01       	movw	r30, r24
 e0c:	21 81       	ldd	r18, Z+1	; 0x01
 e0e:	2f 70       	andi	r18, 0x0F	; 15
 e10:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e14:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
 e18:	20 ff       	sbrs	r18, 0
 e1a:	01 c0       	rjmp	.+2      	; 0xe1e <MIDI_Device_USBTask+0x1c>
	  MIDI_Device_Flush(MIDIInterfaceInfo);
 e1c:	d9 cf       	rjmp	.-78     	; 0xdd0 <MIDI_Device_Flush>
 e1e:	08 95       	ret

00000e20 <MIDI_Device_ReceiveEventPacket>:
 e20:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

bool MIDI_Device_ReceiveEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    MIDI_EventPacket_t* const Event)
{
 e22:	cb 01       	movw	r24, r22
	if (USB_DeviceState != DEVICE_STATE_Configured)
 e24:	20 91 28 01 	lds	r18, 0x0128
 e28:	24 30       	cpi	r18, 0x04	; 4
 e2a:	c1 f4       	brne	.+48     	; 0xe5c <MIDI_Device_ReceiveEventPacket+0x3c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e2c:	26 81       	ldd	r18, Z+6	; 0x06
 e2e:	2f 70       	andi	r18, 0x0F	; 15
 e30:	20 93 e9 00 	sts	0x00E9, r18
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e34:	20 91 e8 00 	lds	r18, 0x00E8
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 e38:	25 ff       	sbrs	r18, 5
 e3a:	10 c0       	rjmp	.+32     	; 0xe5c <MIDI_Device_ReceiveEventPacket+0x3c>
	  return false;

	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
 e3c:	64 e0       	ldi	r22, 0x04	; 4
 e3e:	70 e0       	ldi	r23, 0x00	; 0
 e40:	40 e0       	ldi	r20, 0x00	; 0
 e42:	50 e0       	ldi	r21, 0x00	; 0
 e44:	19 db       	rcall	.-2510   	; 0x478 <Endpoint_Read_Stream_LE>
 e46:	80 91 e8 00 	lds	r24, 0x00E8
 e4a:	85 fd       	sbrc	r24, 5

	if (!(Endpoint_IsReadWriteAllowed()))
 e4c:	09 c0       	rjmp	.+18     	; 0xe60 <MIDI_Device_ReceiveEventPacket+0x40>
 e4e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e52:	8b 77       	andi	r24, 0x7B	; 123
 e54:	80 93 e8 00 	sts	0x00E8, r24
 e58:	81 e0       	ldi	r24, 0x01	; 1
	  Endpoint_ClearOUT();

	return true;
 e5a:	08 95       	ret
 e5c:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
	  return false;
 e5e:	08 95       	ret
 e60:	81 e0       	ldi	r24, 0x01	; 1
	Endpoint_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearOUT();

	return true;
 e62:	08 95       	ret

00000e64 <_exit>:
 e64:	f8 94       	cli

00000e66 <__stop_program>:
 e66:	ff cf       	rjmp	.-2      	; 0xe66 <__stop_program>
